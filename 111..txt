1.最长字符串扫描
通过对webshell样本的分析，发现大部分webshell为了防止被特征码方式扫面出
对其本身进行了加密处理，从而在源码中产生了较长的字符串，通过对这种“较长字符”
的检测，寻找webshell
测试方案：在正常网站构架下加入webshell样本
测试用例1：总文件数1158 webshell数100
测试用例2：总文件数 1308 webshell数250
测试用例3：总文件数 5722 webshell数400
测试用例4：总文件数6322 webshell数1000
测试结果1：检出 98个webshell 2个正常网页，运行时间1s
           检出率：98%
           误报率：0.1%
测试结果2：检出185个webshell 1个正常网页，运行时间2s
           检出率：74%
           误报率：0.07% 
测试结果3：检出386个webshell 1个正常网页，运行时间2s
           检出率：96.5%
           误报率：0.01%
测试结果4：检出908个webshell 2个正常网页，运行时间3s
           检出率：90.8%
           误报率：0.1%

结论分析：部分正常php被检出由于其定义了过长的变量，该方法的检出率与速度均令人满意。
检出率不稳定 80k以上的webshell之间的检出率能维持在85以上
本方法适合大规模扫描


2.文件关联法
由于webshell的本身特性，在一个网站中，该webshell和其他文件必然不会产生关联，而其他文件则会有
文件件的相互应用，根据此种特性，扫描网页脚本中的引用关系，未被其他文件关联到的文件孤岛，则可
能为危险文件
测试方案：在正常网站构架下加入webshell样本
测试用例1：总文件数1158 webshell数100
测试用例2：总文件数1308 webshell数250
测试用例3：总文件数5722 webshell数400
测试用例4：总文件数6322 webshell数1000
测试结果1：检出100个webshell 149个正常网页 运行时间2s
           检出率：100%
           误报率：12.87%
测试结果2：检出250个webshell 149个正常网页 运行时间3s
           检出率：100%
           误报率：11.39%
测试结果3：检出400个webshell 639个正常网页 运行时间7s
           检出率：100%
           误报率：11.17%
测试结果4：检出1000个webshell 639个正常网页 运行时间8s
           检出率：100%
           误报率：10.11%
           
结论分析：本方法虽具有100%的检出率，但误报率也很高，因为有许多php脚本虽具有功能，可能未被引用
本方法适合确定一个危险范围，再进一步扫描


3.表单法
通过对webshell样本的分析，发现大部分webshell会有其登陆界面，限制登录
根据此项特点，检测webshell的运行界面，寻找是否有登录特征
测试方案：在正常网站构架下加入webshell样本
测试用例1：总文件数1158 webshell数100
测试用例2：总文件数1308 webshell数250
测试用例3：总文件数5722 webshell数400
测试用例4：总文件数6322 webshell数1000   
测试结果1：检出90个webshell 1个正常网页 运行时间44s
           检出率：90%
           误报率：0.08%
测试结果2：检出201个webshell 1个正常网页 运行时间2min47s 
           检出率：80.4%
           误报率：0.08%
测试结果3：检出363个webshell 2个正常网页 运行时间3min55s
           检出率：90.75%
           误报率：0.04% 
测试结果4：检出911个webshell 2个正常网页 运行时间7min20s
           检出率：91.1%
           误报率：0.03% 
          
结论分析：未检出的webshell部分本身有问题无法运行，部分过于简单无登陆限制
          检出的正常网页为其管理员登陆界面，属于“危险界面”，同时由于其要获取
          php文件被服务器解析后的html页面，会消耗大量时间
          检出率稳定，但速度太低
          
          
4.特征值扫描
对所有webshell样本取其md5特征得到特征库，扫描时将文件的md5特征在特征库中查找
测试方案：在正常网站构架下加入webshell样本
测试用例1：总文件数1158 webshell数100
测试用例2：总文件数1308 webshell数250
测试用例3：总文件数5722 webshell数400
测试用例4：总文件数6322 webshell数1000   
测试结果1：检出100个webshell 0个正常网页 运行时间5s
           检出率：100%
           误报率 0%
测试结果2：检出250个webshell 0个正常网页 运行时间5s
           检出率：100%
           误报率：0%
测试结果3：检出400个webshell 0个正常网页 运行时间29s
           检出率：100%
           误报率：0%
测试结果4：检出1000个webshell 0个正常网页 运行时间30s
           检出率：100%
           误报率：0%
  
结论分析：对所有webshell样本进行采样，故能得到100%的检出率，但该方法需要
          大量webshell样本的特征
          
          
5.危险代码扫描
手工提取webshell的危险代码，得到危险代码库，扫描时将文件代码与代码库中进行比对
测试用例1：总文件数1158 webshell数100
测试用例2：总文件数1308 webshell数250
测试用例3：总文件数5722 webshell数400
测试用例4：总文件数6322 webshell数1000  
测试结果1：检出54个webshell 6个正常网页 运行时间15s
           检出率：54%
           误报率 0.51%
测试结果2：检出143个webshell 6个正常网页 运行时间15s
           检出率：57.2%
           误报率：0.45%
测试结果3：检出147个webshell 8个正常网页 运行时间35s
           检出率：36.75%
           误报率：0.14%
测试结果4：检出456个webshell 8个正常网页 运行时间37s
           检出率：45.6%
           误报率：0.12%
          
结论分析：对webshell分析得到的特征越多，准确率会越高，但时间会有所增长
误报率也可能提高。


比较：
webshellkill（阿Dwebshell检测器）
测试1 100检出54 1158误检1 检出率54% 误检率0.08% 用时3.04s
测试2 250检出105 1308误检1 检出率42%  误报率0.08% 用时10.36s
测试3 400检出105 5722误检1 检出率26.25% 误检率0.02% 用时7.05s
测试4 1000检出235 6322误检1 检出率23.5% 误检率0.02% 用时16.40s
anchiva检测器（北京安信华实验室）
测试1 100检出96 1158误检8 检出率96% 误检率0.69% 用时19s
测试2 250检出184 1308误检8 检出率73.5%  误检率0.61% 用时47s
测试3 400检出394 5722误检8 检出率98.5% 误检率0.14% 用时1min24s
测试4 1000检出932 6322误检8 检出率93.2%  误检率0.13% 用时3min42s
